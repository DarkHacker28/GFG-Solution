class Solution
{
public:
    void splitList(Node *head, Node **ahead, Node **dhead)
    {
        *ahead = nullptr;
        *dhead = nullptr;

        Node *asc_tail = nullptr;
        Node *desc_tail = nullptr;

        Node *curr = head;
        bool isAscending = true;

        while (curr)
        {
            Node *next_node = curr->next;

            if (isAscending)
            {
                if (!(*ahead))
                {
                    *ahead = curr;
                }
                else
                {
                    asc_tail->next = curr;
                }
                asc_tail = curr;
            }
            else
            {
                if (!(*dhead))
                {
                    *dhead = curr;
                }
                else
                {
                    desc_tail->next = curr;
                }
                desc_tail = curr;
            }

            isAscending = !isAscending;
            curr->next = nullptr;
            curr = next_node;
        }
    }

    void reverse(Node *&head)
    {
        Node *prev = nullptr;
        Node *curr = head;

        while (curr)
        {
            Node *next_node = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next_node;
        }

        head = prev;
    }

    Node *merge(Node *head1, Node *head2)
    {
        if (!head1)
            return head2;
        if (!head2)
            return head1;

        Node *merged = nullptr;
        if (head1->data < head2->data)
        {
            merged = head1;
            merged->next = merge(head1->next, head2);
        }
        else
        {
            merged = head2;
            merged->next = merge(head1, head2->next);
        }

        return merged;
    }

    // Main sorting function
    void sort(Node **head)
    {
        if (!(*head) || !(*head)->next)
        {
            return;
        }

        Node *ahead = nullptr;
        Node *dhead = nullptr;

        splitList(*head, &ahead, &dhead);

        reverse(dhead);

        *head = merge(ahead, dhead);
    }
};
