#include <vector>
#include <cmath>

class Solution {
public:
    std::vector<int> printKClosest(std::vector<int> arr, int n, int k, int x) {
        int leftIndex = findCrossOver(arr, 0, n - 1, x);
        int rightIndex = leftIndex + 1;

        if (arr[leftIndex] == x) leftIndex--;

        std::vector<int> ans(k);
        for (int i = 0; i < k; i++) {
            if (leftIndex >= 0 && rightIndex < n) {
                int leftDifference = std::abs(x - arr[leftIndex]);
                int rightDifference = std::abs(arr[rightIndex] - x);
                if (leftDifference < rightDifference) {
                    ans[i] = arr[leftIndex];
                    leftIndex--;
                } else {
                    ans[i] = arr[rightIndex];
                    rightIndex++;
                }
            } else if (leftIndex >= 0) {
                ans[i] = arr[leftIndex];
                leftIndex--;
            } else {
                ans[i] = arr[rightIndex];
                rightIndex++;
            }
        }
        return ans;
    }

private:
    int findCrossOver(std::vector<int>& arr, int low, int high, int x) {
        if (arr[high] <= x) {
            return high;
        }
        if (arr[low] > x) {
            return low;
        }
        int mid = (low + high) / 2;
        if (arr[mid] <= x && arr[mid + 1] > x) {
            return mid;
        } else if (arr[mid] < x) {
            return findCrossOver(arr, mid + 1, high, x);
        }
        return findCrossOver(arr, low, mid - 1, x);
    }
};
