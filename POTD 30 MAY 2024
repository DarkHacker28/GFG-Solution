class Solution {
  public:
    int countWays(std::string s1, std::string s2) {
        const int MOD = 1e9 + 7;
        int n = s1.size();
        int m = s2.size();
        
        // Create a 2D dp array with (n+1) x (m+1) dimensions, initialized to 0
        std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, 0));
        
        // Initialize the first column: dp[i][0] = 1 for all i
        for (int i = 0; i <= n; ++i) {
            dp[i][0] = 1;
        }
        
        // Fill the dp array based on the transition rules
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                // If characters match, add both possibilities
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % MOD;
                } else {
                    // If they don't match, carry over the previous value
                    dp[i][j] = dp[i - 1][j] % MOD;
                }
            }
        }
        
        // The result is in dp[n][m]
        return dp[n][m];
    }
};
